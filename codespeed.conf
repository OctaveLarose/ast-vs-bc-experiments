# -*- mode: yaml -*-
# Config file for ReBench
standard_experiment: all
standard_data_file: 'benchmark.data'

statistics:
    confidence_level: 0.95

runs:
    number_of_data_points: 10

quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

are_we_fast_yet:
    ## this is ignored by rebench
    iteration_numbers:
        fast_vm:      &FAST_VM      1000
        slow_vm:      &SLOW_VM      250
        slower_vm:    &SLOWER_VM    85
        very_slow_vm: &VERY_SLOW_VM 25

reporting:
    codespeed:
        url: http://awfy-speed.stefan-marr.de/result/add/json/

# definition of benchmark suites
benchmark_suites:
    steady-som:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../implementations/TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(variable)s "
        max_runtime: 1800
        variable_values: *FAST_VM ## the number iterations measured
        location: awfy/benchmarks/SOM
        benchmarks: &BENCHMARKS
            - DeltaBlue:
                extra_args: 12000
                codespeed_name: "[peak] DeltaBlue"
            - Richards:
                extra_args: 100
                codespeed_name: "[peak] Richards"
            - Json:
                extra_args: 100
                codespeed_name: "[peak] Json"
            - CD:
                extra_args: 250
                codespeed_name: "[peak] CD"
            - Havlak:
                extra_args: 1500
                codespeed_name: "[peak] Havlak"
            
            - Bounce:
                extra_args: 1500
                codespeed_name: "[peak] Bounce"
            - List:
                extra_args: 1500
                codespeed_name: "[peak] List"
            - Mandelbrot:
                extra_args: 500
                codespeed_name: "[peak] Mandelbrot"
            - NBody:
                extra_args: 250000
                codespeed_name: "[peak] NBody"
            - Permute:
                extra_args: 1000
                codespeed_name: "[peak] Permute"
            - Queens:
                extra_args: 1000
                codespeed_name: "[peak] Queens"
            - Sieve:
                extra_args: 3000
                codespeed_name: "[peak] Sieve"
            - Storage:
                extra_args: 1000
                codespeed_name: "[peak] Storage"
            - Towers:
                extra_args: 600
                codespeed_name: "[peak] Towers"

    steady-som-interp:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../implementations/TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(variable)s "
        max_runtime: 3600
        variable_values: *VERY_SLOW_VM ## the number iterations measured
        location: awfy/benchmarks/SOM
        benchmarks: *BENCHMARKS

    steady-som-slower:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../implementations/TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(variable)s "
        max_runtime: 3600
        variable_values: *SLOWER_VM
        location: awfy/benchmarks/SOM
        benchmarks: *BENCHMARKS

    steady-somns:
        gauge_adapter: RebenchLog
        command: " Harness.som %(benchmark)s %(variable)s "
        location: awfy/benchmarks/SOMns
        variable_values: *FAST_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS

    interp-somns:
        gauge_adapter: RebenchLog
        command: " Harness.som %(benchmark)s %(variable)s "
        location: awfy/benchmarks/SOMns
        variable_values: *VERY_SLOW_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS


    steady-java:
        gauge_adapter: RebenchLog
        command: " -cp ../benchmarks/Java/benchmarks.jar Harness %(benchmark)s %(variable)s "
        variable_values: *FAST_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS

    interp-java:
        gauge_adapter: RebenchLog
        command: " -cp ../benchmarks/Java/benchmarks.jar Harness %(benchmark)s %(variable)s "
        variable_values: *VERY_SLOW_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS

    steady-ruby:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: *FAST_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS
    
    steady-crystal:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Crystal
        command: "./harness %(benchmark)s %(variable)s "
        variable_values: *FAST_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS

    ruby-interp:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: *VERY_SLOW_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS
    
    ruby-indy:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: *SLOW_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS
    
    ruby-rbx:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Ruby
        command: "harness-rbx.rb %(benchmark)s %(variable)s "
        variable_values: *VERY_SLOW_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS
    
    steady-js:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/JavaScript
        command: "harness.js %(benchmark)s %(variable)s "
        variable_values: *FAST_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS

    pharo:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Smalltalk
        command: "AWFY_Pharo.image run.st %(benchmark)s %(variable)s "
        variable_values: *SLOW_VM
        max_runtime: 1800
        benchmarks: *BENCHMARKS

    squeak:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Smalltalk
        command: "AWFY_Squeak.image run.st %(benchmark)s %(variable)s "
        variable_values: *SLOW_VM
        max_runtime: 6000
        benchmarks: *BENCHMARKS

    rsqueak:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Smalltalk
        command: "AWFY_RSqueak.image run.st %(benchmark)s %(variable)s "
        variable_values: *SLOW_VM
        max_runtime: 6000
        benchmarks: *BENCHMARKS

    steady-lua:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Lua
        command: " harness.lua %(benchmark)s %(variable)s "
        variable_values: *SLOW_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS

    interp-lua:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Lua
        command: " harness.lua %(benchmark)s %(variable)s "
        variable_values: *VERY_SLOW_VM ## the number iterations measured
        max_runtime: 1800
        benchmarks: *BENCHMARKS


# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    # JVMs
    GraalBasic:
        path: awfy/implementations/
        description: A JVM with Graal, and Graal as top-tier compiler
        binary: graal.sh
        build:
          - ./build-graal.sh
          - ./build-java.sh
    GraalC2:
        path: awfy/implementations/
        description: A JVM with Graal, but C2 as top-tier compiler
        binary: graal-c2.sh
        build:
          - ./build-graal.sh
          - ./build-java.sh
    GraalEnterprise:
        path: awfy/implementations/
        binary: graal-enterprise.sh
        build: ./build-java.sh
    Java8U66:
        path: awfy/implementations/
        binary: java8.sh
        build: ./build-java.sh
    JavaInt:
        path: awfy/implementations/
        binary: java8.sh
        args: " -Xint "
        build: ./build-java.sh

    # SOM VMs
    SOM:
        path: awfy/implementations/SOM/
        binary: som.sh
        build: make
    SOMpp:
        path: awfy/implementations/SOMpp/
        binary: som.sh
        args: " -H512MB "
        build: make
    SOMppOMR:
        path: awfy/implementations/SOMppOMR/
        binary: som.sh
        args: " -H512MB "
        build: ../build-sompp-omr.sh
    TruffleSOM:
        path: awfy/implementations/
        binary: TruffleSOM.sh
        args: "-vv "
        build: ./build-som.sh
    TruffleSOM-Enterprise:
        path: awfy/implementations/
        binary: TruffleSOM-e.sh
        args: "-vv "
    TruffleSOM-TOM:
        path: awfy/implementations/
        binary: TruffleSOM-TOM.sh
        args: "-vv "
    TruffleSOM-TOM-Enterprise:
        path: awfy/implementations/
        binary: TruffleSOM-TOM-e.sh
        args: "-vv "

    SOMns:
        path: awfy/implementations/
        binary: SOMns.sh
        build:
          - ./build-graal.sh
          - ./build-somns.sh
    SOMnsInt:
        path: awfy/implementations/
        binary: SOMns.sh
        args: " -G "
        build: ./build-somns.sh
    SOMns-Enterprise:
        path: awfy/implementations/
        binary: SOMns-e.sh
        build: ./build-somns.sh

    # Ruby VMs
    JRubyTruffle:
        path: awfy/implementations/
        binary: jruby-truffle.sh
    JRubyTruffleEnterprise:
        path: awfy/implementations/
        binary: jruby-truffle-e.sh
    JRubyC2:
        path: awfy/implementations/
        binary: jruby.sh
    JRubyJ8:
        path: awfy/implementations/
        binary: jruby-j8.sh
    JRubyGraal:
        description: JRuby, without Truffle, running with a JVM that uses Graal as top-tier compiler
        path: awfy/implementations/
        binary: jruby-graal.sh
    MRI23:
        path: awfy/implementations/
        binary: mri-23.sh
    RBX314:
        path: awfy/implementations/
        binary: rbx-314.sh
    Topaz:
        path: awfy/implementations/
        binary: Topaz/bin/topaz
        build: ./build-topaz.sh

    Crystal:
        path: awfy/implementations/
        binary: crystal.sh
        build: ../benchmarks/Crystal/build.sh

    # JavaScript VMs
    Node:
        path: awfy/implementations/
        binary: node.sh
    NodeTurboFan:
        path: awfy/implementations/
        binary: node.sh
        args: " --turbo "
    GraalJS:
        path: awfy/implementations/
        binary: graaljs.sh

    Pharo:
      path: awfy/implementations/
      binary: pharo
      build: ./build-pharo.sh
    Squeak:
      path: awfy/implementations/
      binary: squeak
      build: ./build-squeak.sh
    RSqueak:
      path: awfy/implementations/
      binary: rsqueak.sh
      build: ./build-rsqueak.sh

    LuaJIT2:
      path: awfy/implementations/
      binary: luajit2.sh
    Lua53:
      path: awfy/implementations/
      binary: lua53.sh

experiments:
    steady-java:
        description: Measure steady state performance
        benchmark: steady-java
        executions:
            - GraalC2
            - GraalBasic
            - GraalEnterprise
            - Java8U66
    interp-java:
        description: Measure Java Interpreter
        benchmark: interp-java
        executions:
            - JavaInt
    interp-som:
        executions:
            - SOMnsInt:
                benchmark: interp-somns
    steady-som:
        executions:
            - SOM:
                benchmark: steady-som-interp
            - SOMpp:
                benchmark: steady-som-interp
            - SOMppOMR:
                benchmark: steady-som-slower
            - SOMns:
                benchmark: steady-somns
            - SOMns-Enterprise:
                benchmark: steady-somns
            - TruffleSOM:
                benchmark: steady-som
            - TruffleSOM-Enterprise:
                benchmark: steady-som
            - TruffleSOM-TOM:
                benchmark: steady-som
            - TruffleSOM-TOM-Enterprise:
                benchmark: steady-som
    steady-ruby:
        benchmark: steady-ruby
        executions:
            - JRubyTruffle
            - JRubyTruffleEnterprise
    steady-crystal:
        benchmark: steady-crystal
        executions: Crystal
    steady-js:
        benchmark: steady-js
        executions:
            - Node
            - NodeTurboFan
            - GraalJS
    ruby-others:
        executions:
            - MRI23:
                benchmark: ruby-interp
            - JRubyGraal:
                benchmark: ruby-indy
            - JRubyC2:
                benchmark: ruby-indy
            - JRubyJ8:
                benchmark: ruby-indy
            - RBX314:
                benchmark: ruby-rbx
            - Topaz:
                benchmark: ruby-indy

    smalltalk:
        executions:
          - Pharo:
              benchmark: pharo
          - Squeak:
              benchmark: squeak
          - RSqueak:
              benchmark: rsqueak

    lua:
        executions:
            - LuaJIT2:
                benchmark: steady-lua
            - Lua53:
                benchmark: interp-lua
