# -*- mode: yaml -*-
# Config file for ReBench
default_experiment: all
default_data_file: 'benchmark.data'

.are_we_fast_yet:
    ## this is ignored by rebench
    iteration_numbers:
        fast_vm:      &FAST_VM      1000
        slow_vm:      &SLOW_VM      250
        slower_vm:    &SLOWER_VM    85
        very_slow_vm: &VERY_SLOW_VM 25

runs:
  max_invocation_time: 1800

reporting:
    codespeed:
        url: https://awfy-speed.stefan-marr.de/result/add/json/
    rebenchdb:
        # this url needs to point to the API endpoint
        db_url: https://rebench.stefan-marr.de/rebenchdb/results
        repo_url: https://github.com/smarr/awfy-runs
        record_all: true # make sure everything is recorded
        project_name: Are We Fast Yet

# definition of benchmark suites
benchmark_suites:
    steady-som:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../implementations/TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(iterations)s "
        iterations: *FAST_VM ## the number iterations measured
        location: awfy/benchmarks/SOM
        benchmarks: &BENCHMARKS
            - DeltaBlue:
                extra_args: 12000
                codespeed_name: "[peak] DeltaBlue"
            - Richards:
                extra_args: 100
                codespeed_name: "[peak] Richards"
            - Json:
                extra_args: 100
                codespeed_name: "[peak] Json"
            - CD:
                extra_args: 250
                codespeed_name: "[peak] CD"
            - Havlak:
                extra_args: 1500
                codespeed_name: "[peak] Havlak"
            
            - Bounce:
                extra_args: 1500
                codespeed_name: "[peak] Bounce"
            - List:
                extra_args: 1500
                codespeed_name: "[peak] List"
            - Mandelbrot:
                extra_args: 500
                codespeed_name: "[peak] Mandelbrot"
            - NBody:
                extra_args: 250000
                codespeed_name: "[peak] NBody"
            - Permute:
                extra_args: 1000
                codespeed_name: "[peak] Permute"
            - Queens:
                extra_args: 1000
                codespeed_name: "[peak] Queens"
            - Sieve:
                extra_args: 3000
                codespeed_name: "[peak] Sieve"
            - Storage:
                extra_args: 1000
                codespeed_name: "[peak] Storage"
            - Towers:
                extra_args: 600
                codespeed_name: "[peak] Towers"

    steady-som-interp:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../implementations/TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(iterations)s "
        iterations: *VERY_SLOW_VM ## the number iterations measured
        location: awfy/benchmarks/SOM
        benchmarks: *BENCHMARKS

    steady-som-slower:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../implementations/TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(iterations)s "
        iterations: *SLOWER_VM
        location: awfy/benchmarks/SOM
        benchmarks: *BENCHMARKS

    steady-somns:
        gauge_adapter: RebenchLog
        command: " Harness.ns %(benchmark)s %(iterations)s "
        location: awfy/benchmarks/SOMns
        iterations: *FAST_VM ## the number iterations measured
        benchmarks: *BENCHMARKS

    interp-somns:
        gauge_adapter: RebenchLog
        command: " Harness.ns %(benchmark)s %(iterations)s "
        location: awfy/benchmarks/SOMns
        iterations: *VERY_SLOW_VM ## the number iterations measured
        benchmarks: *BENCHMARKS


    steady-java:
        gauge_adapter: RebenchLog
        command: " -cp ../benchmarks/Java/benchmarks.jar Harness %(benchmark)s %(iterations)s "
        iterations: *FAST_VM ## the number iterations measured
        benchmarks: *BENCHMARKS
        build: [./build-java.sh]

    interp-java:
        gauge_adapter: RebenchLog
        command: " -cp ../benchmarks/Java/benchmarks.jar Harness %(benchmark)s %(iterations)s "
        iterations: *VERY_SLOW_VM ## the number iterations measured
        benchmarks: *BENCHMARKS
        build: [./build-java.sh]

    steady-ruby:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(iterations)s "
        iterations: *FAST_VM ## the number iterations measured
        benchmarks: *BENCHMARKS
    
    steady-crystal:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Crystal
        command: "./harness %(benchmark)s %(iterations)s "
        iterations: *FAST_VM ## the number iterations measured
        benchmarks: *BENCHMARKS

    ruby-interp:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(iterations)s "
        iterations: *VERY_SLOW_VM ## the number iterations measured
        benchmarks: *BENCHMARKS
    
    ruby-indy:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(iterations)s "
        iterations: *SLOW_VM ## the number iterations measured
        benchmarks: *BENCHMARKS
    
    ruby-rbx:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Ruby
        command: "harness-rbx.rb %(benchmark)s %(iterations)s "
        iterations: *VERY_SLOW_VM ## the number iterations measured
        benchmarks: *BENCHMARKS
    
    steady-js:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/JavaScript
        command: "harness.js %(benchmark)s %(iterations)s "
        iterations: *FAST_VM ## the number iterations measured
        benchmarks: *BENCHMARKS

    pharo:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Smalltalk
        command: "AWFY_Pharo.image run.st %(benchmark)s %(iterations)s "
        iterations: *SLOW_VM
        benchmarks: *BENCHMARKS

    squeak:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Smalltalk
        command: "AWFY_Squeak.image run.st %(benchmark)s %(iterations)s "
        iterations: *SLOW_VM
        benchmarks: *BENCHMARKS

    rsqueak:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Smalltalk
        command: "AWFY_RSqueak.image run.st %(benchmark)s %(iterations)s "
        iterations: *SLOW_VM
        benchmarks: *BENCHMARKS

    steady-lua:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Lua
        command: " harness.lua %(benchmark)s %(iterations)s "
        iterations: *SLOWER_VM ## the number iterations measured
        benchmarks: *BENCHMARKS

    interp-lua:
        gauge_adapter: RebenchLog
        location: awfy/benchmarks/Lua
        command: " harness.lua %(benchmark)s %(iterations)s "
        iterations: *VERY_SLOW_VM ## the number iterations measured
        benchmarks: *BENCHMARKS

executors:
    # JVMs
    GraalBasic:
        path: awfy/implementations/
        description: A JVM with Graal, and Graal as top-tier compiler
        executable: graal.sh
        build: [./build-graal.sh]
    GraalC2:
        path: awfy/implementations/
        description: A JVM with Graal, but C2 as top-tier compiler
        executable: graal-c2.sh
        build: [./build-graal.sh]
    GraalEnterprise:
        path: awfy/implementations/
        executable: graal-enterprise.sh
    Java8U66:
        path: awfy/implementations/
        executable: java8.sh
    JavaInt:
        path: awfy/implementations/
        executable: java8.sh
        args: " -Xint "

    # SOM VMs
    SOM:
        path: awfy/implementations/SOM/
        executable: som.sh
        build: [make]
    SOMpp:
        path: awfy/implementations/SOMpp/
        executable: som.sh
        args: " -H512MB "
        build: [make]
    SOMppOMR:
        path: awfy/implementations/SOMppOMR/
        executable: som.sh
        args: " -H512MB "
        build: [../build-sompp-omr.sh]
    TruffleSOM:
        path: awfy/implementations/
        executable: TruffleSOM.sh
        args: "-vv "
        build: [./build-som.sh]
    TruffleSOM-Enterprise:
        path: awfy/implementations/
        executable: TruffleSOM-e.sh
        args: "-vv "
        build: [./build-som.sh]
    TruffleSOM-TOM:
        path: awfy/implementations/
        executable: TruffleSOM-TOM.sh
        args: "-vv "
        build: [./build-som.sh]
    TruffleSOM-TOM-Enterprise:
        path: awfy/implementations/
        executable: TruffleSOM-TOM-e.sh
        args: "-vv "
        build: [./build-som.sh]

    RTruffleSOM:
        path: awfy/implementations/
        executable: RTruffleSOM/RTruffleSOM-jit
        build: [./build-rtrufflesom.sh]
    RTruffleSOMInt:
        path: awfy/implementations/
        executable: RTruffleSOM/RTruffleSOM-no-jit
        build: [./build-rtrufflesom.sh]

    SOMns:
        path: awfy/implementations/SOMns
        executable: fast
        build: [../build-somns.sh]
    SOMnsInt:
        path: awfy/implementations/
        executable: SOMns.sh
        args: " -G "
        build: [./build-somns.sh]
    SOMns-Enterprise:
        path: awfy/implementations/
        executable: SOMns-e.sh
        build: [./build-somns.sh]

    # Ruby VMs
    JRubyTruffle:
        path: awfy/implementations/
        executable: jruby-truffle.sh
    JRubyTruffleEnterprise:
        path: awfy/implementations/
        executable: jruby-truffle-e.sh
    JRubyC2:
        path: awfy/implementations/
        executable: jruby.sh
    JRubyJ8:
        path: awfy/implementations/
        executable: jruby-j8.sh
    JRubyGraal:
        description: JRuby, without Truffle, running with a JVM that uses Graal as top-tier compiler
        path: awfy/implementations/
        executable: jruby-graal.sh
    MRI23:
        path: awfy/implementations/
        executable: mri-23.sh
    RBX314:
        path: awfy/implementations/
        executable: rbx-314.sh
    Topaz:
        path: awfy/implementations/
        executable: Topaz/bin/topaz
        build: [./build-topaz.sh]

    Crystal:
        path: awfy/implementations/
        executable: crystal.sh
        build: [../benchmarks/Crystal/build.sh]

    # JavaScript VMs
    Node:
        path: awfy/implementations/
        executable: node.sh
    GraalJS:
        path: awfy/implementations/
        executable: graaljs.sh

    Pharo:
      path: awfy/implementations/
      executable: pharo
      build: [./build-pharo.sh]
    Squeak:
      path: awfy/implementations/
      executable: squeak
      build: [./build-squeak.sh]
    RSqueak:
      path: awfy/implementations/
      executable: rsqueak.sh
      build: [./build-rsqueak.sh]

    LuaJIT2:
      path: awfy/implementations/
      executable: luajit2.sh
    Lua53:
      path: awfy/implementations/
      executable: lua53.sh

experiments:
    steady-java:
        description: Measure steady state performance
        suites: [steady-java]
        executions:
            - GraalC2
            - GraalBasic
            - GraalEnterprise
            - Java8U66
    interp-java:
        description: Measure Java Interpreter
        suites: [interp-java]
        executions:
            - JavaInt
    interp-som:
        executions:
            - SOMnsInt:
                suites: [interp-somns]
    steady-som:
        executions:
            - SOM:
                suites: [steady-som-interp]
            - RTruffleSOM:
                suites: [steady-som]
            - RTruffleSOMInt:
                suites: [steady-som-interp]
            - SOMpp:
                suites: [steady-som-interp]
            - SOMppOMR:
                suites: [steady-som-slower]
            - SOMns:
                suites: [steady-somns]
            - SOMns-Enterprise:
                suites: [steady-somns]
            - TruffleSOM:
                suites: [steady-som]
            - TruffleSOM-Enterprise:
                suites: [steady-som]
            - TruffleSOM-TOM:
                suites: [steady-som]
            - TruffleSOM-TOM-Enterprise:
                suites: [steady-som]
    steady-ruby:
        suites: [steady-ruby]
        executions:
            - JRubyTruffle
            - JRubyTruffleEnterprise
    steady-crystal:
        suites:
            - steady-crystal
        executions:
            - Crystal
    steady-js:
        suites:
            - steady-js
        executions:
            - Node
            - GraalJS
    ruby-others:
        executions:
            - MRI23:
                suites: [ruby-interp]
            - JRubyGraal:
                suites: [ruby-indy]
            - JRubyC2:
                suites: [ruby-indy]
            - JRubyJ8:
                suites: [ruby-indy]
            - RBX314:
                suites: [ruby-rbx]
            - Topaz:
                suites: [ruby-indy]

    smalltalk:
        executions:
          - Pharo:
              suites: [pharo]
          - Squeak:
              suites: [squeak]
          - RSqueak:
              suites: [rsqueak]

    lua:
        executions:
            - LuaJIT2:
                suites: [steady-lua]
            - Lua53:
                suites: [interp-lua]
